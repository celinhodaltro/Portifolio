@using Application.Main.Sources.Components.Dialogs


<MudFab StartIcon="@menuIcon"
        Size="Size.Medium"
        Class="floating-menu-button"
        Style="color:white; background-color:#1E1E2F"
        @onclick="ToggleMenu" />





<MudDrawer @bind-Open="@isOpen"
           Width="300px"
           Height="100%"
           Fixed="true"
           OverlayAutoClose="true"
           Variant="@DrawerVariant.Temporary"
           Anchor="Anchor.Right"
           Style="background: rgba(255, 255, 255, 0.09); border-radius: 16px 0px 0px 16px; backdrop-filter: blur(6px); border: 1p solid rgba(255, 255, 255, 0.1);"
           Elevation="1">
    <MudDrawerHeader>
        <MudText Typo="Typo.h6" Class="mb-2" Style="flex-grow: 1; color:white">
            <MudIcon Icon="@Icons.Material.Filled.Menu"></MudIcon>
            Menu
        </MudText>
        <MudFab StartIcon="@Icons.Material.Filled.Close"
                Color="Color.Error"
                Size="Size.Small"
                OnClick="ToggleMenu" />

    </MudDrawerHeader>


    <MudNavMenu Class="pa-2">
        <MudGrid Gutter="Size.Small">
            @foreach (var item in MenuItems)
            {
                <MudItem xs="12" sm="6">
                    <MudPaper Class="d-flex flex-column align-center justify-center pa-2 cursor-pointer"
                              Style="min-height: 120px; max-height:120px; background-color:#2B323D"
                              @onclick="@(() => HandleMenuItemClick(item.Route))">
                        <MudIcon Icon="@item.Icon" Size="Size.Large" Style="color:white" />
                        <MudText Class="text-white" Typo="Typo.subtitle1" Align="Align.Center">@item.Label</MudText>
                    </MudPaper>
                </MudItem>
            }

        </MudGrid>

    </MudNavMenu>

    <MudDivider Class="mt-4 mb-2" />

    <MudText Typo="Typo.caption" Align="Align.Center" Class="pa-2 text-white">
        © 04/05/2025 - Made by João Marcelo Daltro
    </MudText>
</MudDrawer>



@code {
    private bool isOpen = false;

    private string menuIcon => isOpen ? Icons.Material.Filled.Close : Icons.Material.Filled.Menu;
    private record MenuItem(string Icon, string Label, string Route);
    private void ToggleMenu() => isOpen = !isOpen;

    [Inject]
    private IDialogService? dialogService { get; set; }
    [Inject]
    private ISnackbar? snackbar { get; set; }
    [Inject]
    IJSRuntime? JS { get; set; }
    [Inject]
    NavigationManager? Navigation { get; set; }

    private void NavigateTo(string section)
    {
        Navigation!.NavigateTo($"{Navigation.BaseUri}{section}");
        isOpen = false;
    }

    private List<MenuItem> MenuItems = new()
    {
        new(Icons.Material.Filled.Home, "Inicio", ""),
        new(Icons.Material.Filled.School, "Experiencia", "experiences"),
        new(Icons.Material.Filled.SettingsSystemDaydream, "Projetos", "projects"),
        new(Icons.Material.Filled.ContactPhone, "Meu Contato", "contact"),
        new(Icons.Material.Filled.Download, "Curriculo", "download"),
        new(Icons.Material.Filled.DesignServices, "Identidade visual", "IdentityVisual"),
    };

    private async Task HandleMenuItemClick(string route)
    {
        isOpen = false;

        switch (route.ToLower())
        {
            case "download":
                await DownloadCV();
                break;
            case "contact":
                await OpenContatoPopup();
                break;
            default:
                NavigateTo(route);
                break;
        }
    }




    private async Task OpenContatoPopup()
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions { MaxWidth = MaxWidth.Small, FullWidth = true, CloseButton = true, NoHeader = true };
        await dialogService.ShowAsync<DialogContact>("Contato", parameters, options);
    }

    private async Task DownloadCV()
    {
        var pdfPath = $"{Navigation.BaseUri}docs/curriculo/Curriculo.pdf";

        await JS.InvokeVoidAsync("downloadFile", pdfPath, "Curriculo - João Marcelo Daltro Marques.pdf");
        snackbar.Add("Obrigado por baixar meu currículo! 😁", Severity.Success);
    }
}

<script>
    function downloadFile(fileUrl, fileName) {
        const link = document.createElement("a");
        link.href = fileUrl;
        link.download = fileName;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }
</script>

<style>
    .floating-menu-button {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 1100;
    }

    .floating-contact-button {
        position: fixed;
        top: 20px;
        right: 80px;
        z-index: 1100;
    }

    .mud-drawer {
        position: fixed !important;
        top: 0;
        right: 0;
    }

    .floating-cv-button {
        position: fixed;
        bottom: 20px;
        right: 140px;
        z-index: 1100;
    }
</style>
