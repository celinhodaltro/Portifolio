<div id="projects" class="section-projects">
    <MudText Class="mb-5 text-white" Align="Align.Center" Typo="Typo.h4">PROJETOS</MudText>
    <MudDivider Class="mb-5" />

    <MudCarousel TData="ProjectModel"
                 AutoCycle="false"
                 ShowArrows="true"
                 ShowIndicators="false"
                 Class="project-carousel"
                 Style="margin-top: 100px; margin-bottom: 100px;">
        @foreach (var group in ProjectsList.Chunk(4))
        {
            <MudCarouselItem>
                <div class="carousel-group">
                    @foreach (var project in group)
                    {
                        <MudCard Class="project-card hover-elevation-8 transition"
                                 Style="background: rgba(255,255,255,0.09);
                                                border-radius: 16px;
                                                backdrop-filter: blur(6px);
                                                border: 1px solid rgba(255,255,255,0.1);">
                            <img src="@project.Image"
                                 style="width:100%;height:180px;object-fit:cover;
                                                border-top-left-radius:16px;border-top-right-radius:16px;" />

                            <MudCardContent Class="text-center">
                                <MudText Typo="Typo.h6" Class="text-white mb-2">@project.Title</MudText>
                                <MudText Typo="Typo.body2" Class="text-white mb-3">@project.Description</MudText>

                                <div class="d-flex flex-wrap gap-1 mb-3">
                                    @foreach (var tech in project.Technologies)
                                    {
                                        <MudChip T="string" Size="Size.Small" Color="Color.Primary" Text="@tech" />
                                    }
                                </div>

                                <MudCardActions Class="d-flex justify-space-between">
                                @if (!string.IsNullOrEmpty(project.DemoUrl))
                                {
                                        <MudButton Variant="Variant.Outlined" Color="Color.Primary"
                                               StartIcon="@Icons.Material.Filled.Launch"
                                               Href="@project.DemoUrl" Target="_blank">
                                        Demo
                                    </MudButton>
                                }
                                @if (!string.IsNullOrEmpty(project.GitHubUrl))
                                {
                                    <MudButton Variant="Variant.Outlined" Color="Color.Secondary"
                                               StartIcon="@Icons.Custom.Brands.GitHub"
                                               Href="@project.GitHubUrl" Target="_blank">
                                        GitHub
                                    </MudButton>
                                }
                                </MudCardActions>
                            </MudCardContent>
                        </MudCard>
                    }
                </div>
            </MudCarouselItem>
        }
    </MudCarousel>
</div>

<style>
    .mud-carousel {
        height: 500px !important;
        overflow: visible !important;
    }

    /* layout padrão */
    .carousel-group {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 16px;
        padding: 16px;
        align-items: stretch;
    }

    /* tablet */
    @@media (max-width: 1024px) {
        .carousel-group
    {
        grid-template-columns: repeat(2, 1fr);
    }

    }

    /* celular */
    @@media (max-width: 768px) {
        .carousel-group

    {
        grid-template-columns: 1fr;
    }

    .mud-carousel {
        height: auto !important;
        margin-top: 40px !important;
        margin-bottom: 40px !important;
    }

    .project-card img {
        height: 150px !important;
    }

    .project-card {
        margin: 0 auto;
        max-width: 90%;
    }

    }
</style>



@code {
    private List<ProjectModel> ProjectsList = new()
    {
        new()
        {
            Title = "Meu Portifólio",
            Description = "Esse porifólio, feito completamente com .NET usando o flamework Blazor.",
            Image = "img/projects/Portifolio.png",
            Technologies = new[] { ".NET", "Blazor", "Devops"},
            DemoUrl = "https://celinhodaltro.github.io/Portifolio/",
            GitHubUrl = ""
        },
        new()
        {
            Title = "Ursulla Bot",
            Description = "Um BOT para ministrar sessões de jogos no Discord, organizando valor por pessoa, classe escolhida e etc.",
            Image = "img/projects/Ursulla Bot.png",
            Technologies = new[] { ".NET", "NetCord", "Postgree"},
            DemoUrl = "",
            GitHubUrl = ""
        },
        new()
        {
            Title = "ExpForge",
            Description = "Uma ferramenta CLI open source para auxiliar desenvolvedores de widgets, geoprocess do arcgis.",
            Image = "img/projects/ExpForge.png",
            Technologies = new[] { ".NET", "Arcgis", "React" },
            DemoUrl = "https://celinhodaltro.github.io/ExpForge.Documentation/",
            GitHubUrl = "https://github.com/celinhodaltro/ExpForge"
        },
        new()
        {
            Title = "Street View",
            Description = "Um Street View para navegação de cenas 3d no Experience Builder, criado na minha atuação na Conder",
            Image = "img/projects/StreetView.png",
            Technologies = new[] { "Arcgis", "React", "GEO" },
            DemoUrl = "",
            GitHubUrl = ""
        },
        new()
        {
            Title = "Informs Devops Center",
            Description = "Centralizador de Rotinas CI/CD do Informs (Conder).",
            Technologies = new[] { "Devops", "CI/CD", "Runner"},
            DemoUrl = "",
        }
    };

    public class ProjectModel
    {
        public string Title { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public string Image { get; set; } = string.Empty;
        public string[] Technologies { get; set; } = Array.Empty<string>();
        public string DemoUrl { get; set; } = string.Empty;
        public string GitHubUrl { get; set; } = string.Empty;
    }
}
